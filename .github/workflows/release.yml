# SPDX-FileCopyrightText: Â© 2024 Matt Williams <matt.williams@bristol.ac.uk>
# SPDX-License-Identifier: MIT

name: Build release
run-name: Build release - ${{ inputs.version) }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: The new version, can be "patch", "minor", "major", or a valid semver string
        type: string
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
      
permissions: {}

jobs:
  check-inputs:
    name: Check inputs
    runs-on: ubuntu-latest
    steps:
      - name: Check release branch
        if: github.ref_name != 'master'
        run: |
          echo "::error::Release must be made on the master branch"
          exit 1
      - name: Check version format
        shell: bash
        if: ${{ !contains(fromJSON('["major", "minor", "patch"]'), inputs.version) }}
        run: |
          if ! [[ '${{ inputs.version }}' =~ [[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+ ]]; then
            echo "::error::Verseion string must be a valid semver string"
            exit 1
          fi

  check:
    name: Check
    needs: check-inputs
    uses: ./.github/workflows/check.yml
    with:
      ref: "${{ github.sha }}"
    permissions:
      contents: read

  tag-release:
    name: Tag release
    needs: check
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      ref: "${{ steps.get_version.outputs.version }}"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}  # Use ref here since we must commit on a branch
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.target }}
      - name: Install cargo-edit tool
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-edit
      - name: Update version string
        run: |
          echo Version input is '${{ inputs.version }}'
          if [ '${{ contains(fromJSON('["major", "minor", "patch"]'), inputs.version) }}' = 'true' ]; then
            echo 'Setting based on update spec'
            cargo set-version --bump ${{ inputs.version }}
          elif [ -n '${{ inputs.version }}' ]; then
            echo 'Updating based on explicit version'
            cargo set-version ${{ inputs.version }}
          fi
          git add Cargo.toml
      - name: Save the version
        id: get_version
        run: echo version="$(cargo metadata --format-version 1 --no-deps | jq --raw-output '.packages[0].version')" >> "${GITHUB_OUTPUT}"
      - name: Tag release
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git commit -m "Release ${{ steps.get_version.outputs.version }}"
          git tag -a -m "Release ${{ steps.get_version.outputs.version }}" "${{ steps.get_version.outputs.version }}"
          git push --atomic --tags origin HEAD

  build-release:
    name: "Build release (${{ matrix.target }})"
    needs: tag-release
    uses: ./.github/workflows/build.yml
    with:
      ref: ${{ needs.tag-release.outputs.ref }}
    outputs:
      ref: "${{ needs.tag-release.outputs.ref }}"
    permissions:
      contents: read

  make-release:
    name: Make release ${{ needs.tag-release.outputs.ref }}
    needs: build-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Fetch release artefacts
        uses: actions/download-artifact@v4
        with:
          pattern: clifton-*
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build-release.outputs.ref }}
          files: clifton-*
